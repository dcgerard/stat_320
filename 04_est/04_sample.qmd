---
title: "Random Sampling"
author: "David Gerard"
date: today
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE, 
            fig.width = 4, 
            fig.height = 3, 
            fig.align = "center")
ggplot2::theme_set(ggplot2::theme_bw() + ggplot2::theme(strip.background = ggplot2::element_rect(fill = "white")))
```

-   Before doing sampling, make sure you set the seed so that you have reproducible results. E.g., this makes it so that your "random selection" is the same every time you first run the seed.

    ```{r}
    set.seed(3574927)
    ```

-   If you are having trouble coming up with a random seed, you could NIST's [Interoperable Randomness Beacons API](https://csrc.nist.gov/Projects/interoperable-randomness-beacons/beacon-20), which generates a new truly random number every 60 seconds. You would only run this once and copy the resulting number in your script. You would not include this script anywhere in any code you have.
    ```{r}
    #| eval: false
    ## HTTP request for a random number
    library(httr2)
    reqout <- request(base_url = "https://beacon.nist.gov/beacon/2.0/pulse/last") |>
      req_perform()
    
    ## A random value represented as a 64-byte (512 bits) hex string
    hex <- resp_body_json(reqout)$pulse$localRandomValue 
    
    ## select only first few digits to make number small. You can increase this.
    hexsmall <- substr(hex, start = 1, stop = 6) 
    
    ## convert to an integer. This is your seed.
    strtoi(x = hexsmall, base = 16) 
    ```

-   You generate ID's for with `seq()` or `:`
    ```{r}
    # 1:100
    idvec <- seq(from = 1, to = 20)
    idvec
    ```

-   You can sample (without replacement) from this vector with `sample()`
    ```{r}
    sample(x = idvec, size = 5)
    ```
 
-   If you don't give an argument for `size`, then sample will randomly permute the values.
    ```{r}
    sample(x = idvec)
    ```
    This is useful for random assignment.

-   You should generally also randomize order, but if you need to see the group ID's in an easier to read format, use `sort()`.
    ```{r}
    sample(x = idvec, size = 5) |>
      sort()
    ```

-   If you are doing random assignment, you have a data frame of individuals. E.g., from the `birthweight` data.
    ```{r}
    #| message: false
    library(tidyverse)
    birthweight <- read_csv("https://dcgerard.github.io/stat_320/data/birthweight.csv")
    ```
    Then you create a column with the number of groups via `rep()`, and then randomly permute it with `sample()`. E.g., suppose we want three groups:
    ```{r}
    birthweight |>
      mutate(group = rep(1:3, length.out = n())) |> ## choose groups of equal size
      mutate(group = sample(group)) ## randomly assign
    ```

::: {.panel-tabset}
## Exercise
Randomly assign 400 individuals (with IDs 1 through 400) into two groups, `"treatment"` and `"control"`.

## Solution
```{r}
tibble(id = 1:400) |>
  mutate(group = rep(c("treatmnet", "control"), length.out = n())) |> 
  mutate(group = sample(group))
```
:::

::: {.panel-tabset}
## Exercise
The treatment is way more expensive than the control, so randomly assign only 100 to `"treatment"` and 300 to `"control"`.

## Solution
```{r}
tibble(id = 1:400) |>
  mutate(group = c(rep("treatment", 100), rep("control", 300))) |> 
  mutate(group = sample(group))
```
:::
