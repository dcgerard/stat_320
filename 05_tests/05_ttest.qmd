---
title: "One Sample t-Tests in R"
author: "David Gerard"
format: html
date: today
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE, 
            fig.width = 4, 
            fig.height = 3, 
            fig.align = "center")
ggplot2::theme_set(ggplot2::theme_bw() + ggplot2::theme(strip.background = ggplot2::element_rect(fill = "white")))
```

Suppose we know the average birthweight in America is 110 oz. We are curious if the babies in a Boston area hospital have a different birthweight. Let $X_i$ be the birthweight of the $i$ Boston baby, then we assume that $X_i \sim N(\mu, \sigma^2)$ and are independent. We want to test

\begin{align}
H_0: \mu &= 110\\
H_1: \mu &\neq 110
\end{align}

Let's first read in the data on the $n = 1000$ babies:

```{r}
#| message: false
library(tidyverse)
library(broom)
birthweight <- read_csv("https://dcgerard.github.io/stat_320/data/birthweight.csv")
```

We then use `t.test()` to run the $t$-test. The arguments are:

- `formula`: a formula object (generated with a tilde `~`). 
    - We put the name of the variable we are exploring to the left of the tilde.
    - We put the number `1` to the right of the tilde.
- `data`: the name of the data frame containing the variable.
- `mu`: The null value. The default is `0` since this is the most common test.
- `alternative`: We use the default `"two.sided"`, since our alternative hypothesis is of the form parameter $\neq$ value.

```{r}
tout <- t.test(weight ~ 1, data = birthweight, mu = 110)
```

We then use `broom::tidy()` to get a summary of the $t$-test output.

```{r}
bout <- tidy(tout)
bout
```

We can manually verify these results (though, you wouldn't do this step in real life):

```{r}
xbar <- mean(birthweight$weight)
s <- sd(birthweight$weight)
n <- length(birthweight$weight)
mu0 <- 110
tstat <- (xbar - mu0) / (s / sqrt(n))
pval <- 2 * pt(-abs(tstat), df = n - 1)
tstat
pval
```


If instead we had the alternative of $H_1: \mu < \mu_0$, then we would use the `alternative = "less"` argument.

```{r}
tout <- t.test(weight ~ 1, data = birthweight, mu = 110, alternative = "less")
bout <- tidy(tout)
bout$p.value
```

If instead we had the alternative of $H_1: \mu > \mu_0$, then we would use the `alternative = "greater"` argument.

```{r}
tout <- t.test(weight ~ 1, data = birthweight, mu = 110, alternative = "greater")
bout <- tidy(tout)
bout$p.value
```

- **Exercise**: Consider the lead data that you can read about [here](../data.qmd#lead) and download from <https://dcgerard.github.io/stat_320/data/lead.csv>. IQ tests are designed to have a mean of 100. Use `iqf` to test if the control group has an average IQ value of 100. Separately test if the exposed group has an average IQ less than 100. State the hypotheses, test results, and conclusions.

```{r}
#| echo: false
#| eval: false
lead <- read_csv("https://dcgerard.github.io/stat_320/data/lead.csv")

# Control
lead |>
  filter(Group == "control", !is.na(iqf)) ->
  df_control

# Null mu = 100, alternative mu neq 100.
t.test(iqf ~ 1, data = df_control, mu = 100) |>
  tidy()

# p = 0.0001128, so we have strong evidence that mean IQ is not 100

lead |>
  filter(Group == "exposed", !is.na(iqf)) ->
  df_exposed

# Null mu = 100, alternative mu < 100.
t.test(iqf ~ 1, data = df_exposed, mu = 100, alternative = "less") |>
  tidy()

# p = 1.7e-08, so we have very strong evidence that mu < 100
```


