---
title: "The Normal Distribution"
author: "David Gerard"
date: today
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE, 
            fig.width = 4, 
            fig.height = 3, 
            fig.align = "center")
ggplot2::theme_set(ggplot2::theme_bw() + ggplot2::theme(strip.background = ggplot2::element_rect(fill = "white")))
```

```{r}
#| message: false
#| echo: false
library(tidyverse)
```


- The density of birthweights in America:

  ![](../00_course_outline/cartoons/birthweights.png)\ 

- The distribution of many variables in Statistics approximate the 
  **normal distribution**.
    - If you know the mean and standard deviation of a normal distribution, then
      you know the whole distribution.
    - Larger standard deviation implies more spread out (larger and smaller values
      are both more likely).
    - Mean determines where the data are centered.

- Normal densities with different means.
  ```{r, echo=FALSE}
  library(ggplot2)
  library(ggthemes)
  x <- seq(-10, 10, length = 100)
  y1 <- dnorm(x = x, mean = 0, sd = 2)
  y2 <- dnorm(x = x, mean = -4, sd = 2)
  y3 <- dnorm(x = x, mean = 4, sd = 2)
  dfdat <- data.frame(x = rep(x, 3), 
                      y = c(y1, y2, y3), 
                      z = factor(rep(c(1, 2, 3), each = length(x))))
  
  ggplot(data = dfdat, mapping = aes(x = x, y = y, color = z, lty = z)) +
    geom_line(lwd=1) + 
    ggthemes::scale_color_colorblind() +
    theme(legend.position="none") +
    ylab("f(x)") +
    xlab("x")
  ```

- Normal densities with different standard deviations
  ```{r, echo=FALSE}
  x <- seq(-10, 10, length = 100)
  y1 <- dnorm(x = x, mean = 0, sd = 1)
  y2 <- dnorm(x = x, mean = 0, sd = 2)
  y3 <- dnorm(x = x, mean = 0, sd = 4)
  dfdat <- data.frame(x = rep(x, 3), 
                      y = c(y1, y2, y3), 
                      z = factor(rep(c(1, 2, 3), each = length(x))))
  
  ggplot(data = dfdat, mapping = aes(x = x, y = y, color = z, lty = z)) +
    geom_line(lwd=1) + 
    ggthemes::scale_color_colorblind() +
    theme(legend.position="none") +
    ylab("f(x)") +
    xlab("x")
  ```
  
- Density Function (height of curve, **NOT** probability of a value).

  ```{r}
  dnorm(x = 2, mean = 1, sd = 1)
  ```
  
  ```{r, echo = FALSE}
  x <- seq(-2, 4, length = 100)
  y <- dnorm(x, mean = 1, sd = 1)
  data.frame(x = x, y = y) |>
  ggplot(aes(x = x, y = y)) +
    geom_line() +
    ylab("f(x)") +
    geom_segment(dat = data.frame(x = 2, xend = 2, y = 0, 
                                  yend = dnorm(x = 2, mean = 1, sd = 1)), 
                 aes(x = x, y = y, xend = xend, yend = yend), lty = 2, col = 2)
  ```
    
- Random Generation (generate samples from a given normal distribution).

  ```{r}
  samp <- rnorm(n = 1000, mean = 1, sd = 1)
  head(samp)
  ```
  
  ```{r, echo = FALSE}
  data.frame(samp = samp) |>
    ggplot(aes(x = samp)) +
    geom_histogram(fill = "white", color = "black", bins = 20)
  ```
  
- Cumulative Distribution Function (probability of being less than or equal 
  to some value).

  ```{r}
  pnorm(q = 2, mean = 1, sd = 1)
  ```
  
  ```{r, echo = FALSE}
  x <- seq(-2, 4, length = 500)
  y <- dnorm(x, mean = 1, sd = 1)
  polydf <- data.frame(x = c(min(x), x[x < 2], 2, 0), 
                       y = c(0, y[x < 2], 0, 0))
  data.frame(x = x, y = y) |>
    ggplot(aes(x = x, y = y)) +
    geom_line() +
    ylab("f(x)") +
    geom_polygon(data = polydf, mapping = aes(x = x, y = y), 
                 fill = "blue", alpha = 1/4)
  ```
    
- Quantile function (find value that has a given the probability of being less 
  than or equal to it).
  
  ```{r}
  qnorm(p = 0.8413, mean = 1, sd = 1)
  ```
  
  ```{r, echo = FALSE}
  x <- seq(-2, 4, length = 500)
  y <- dnorm(x, mean = 1, sd = 1)
  polydf <- data.frame(x = c(min(x), x[x < 2], 2, 0), 
                       y = c(0, y[x < 2], 0, 0))
  data.frame(x = x, y = y) |>
    ggplot(aes(x = x, y = y)) +
    geom_line() +
    ylab("f(x)") +
    geom_polygon(data = polydf, mapping = aes(x = x, y = y), 
                 fill = "blue", alpha = 1/4) +
    annotate(geom = "text", x = 0.5, y = 0.1, label = "0.8413", color = "black")
  ```  

